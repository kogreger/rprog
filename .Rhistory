qplot(data = diamonds, x = price)
qplot(data = diamonds, x = price, xlim = c(0,2500))
qplot(data = diamonds, x = price, xlim = c(500,1000))
qplot(data = diamonds, x = price, xlim = c(500,1000), binwidth = 1)
qplot(data = diamonds, x = price, xlim = c(0,2000), binwidth = 1)
qplot(data = diamonds, x = price) +
facet_wrap(~ color)
qplot(data = diamonds, x = price) +
facet_wrap(~ cut)
by(diamonds, cut, summary)
by(diamonds, cut, str)
?by
str(diamonds)
by(diamonds, diamonds$cut, str)
by(diamonds, diamonds$cut, summary)
by(diamonds$price, diamonds$cut, summary)
by(diamonds$price, diamonds$cut, max)
qplot(x = price, data = diamonds) + facet_wrap(~cut)
?facet_wrap
qplot(x = price, data = diamonds) + facet_wrap(~cut, scales = free)
qplot(x = price, data = diamonds) + facet_wrap(~cut, scales = "free"")
qplot(x = price, data = diamonds) + facet_wrap(~cut, scales = "free")
qplot(x = price, y = carat, data = diamonds) + facet_wrap(~cut, scales = "free")
qplot(x = price / carat, data = diamonds) + facet_wrap(~cut, scales = "free")
qplot(x = price / carat, data = diamonds) + facet_wrap(~cut, scales = "free") + scale_x_log10()
?qplot
qplot(data = diamonds, x = price, geom = "boxplot") + facet_wrap(~ cut)
qplot(data = diamonds, x = cut, y = price, geom = "boxplot")
qplot(data = diamonds, x = clarity, y = price, geom = "boxplot")
qplot(data = diamonds, x = color, y = price, geom = "boxplot")
str(subset(diamonds, color == D))
str(subset(diamonds, color = D))
str(subset(diamonds$price, color = D))
str(subset(diamonds, color = D))
summary(subset(diamonds, color = D))
summary(subset(diamonds$price, color = D))
summary(subset(diamonds, color = D))
summary(subset(diamonds, color = D)$price)
IQR(subset(diamonds, color = D)$price)
summary(subset(diamonds, color = J)$price)
IQR(subset(diamonds, color = J)$price)
?diamonds
summary(subset(diamonds, color == J)$price)
?IQR
by(diamonds$price, diamonds$color, summary)
by(diamonds$price, diamonds$color, IQR)
qplot(data = diamonds, x = price, y = carat) + facet_wrap(~ color)
qplot(carat,data=diamonds,geom="freqpoly",binwidth=0.01,color=I('black'))+scale_x_continuous(limit=c(0,5),breaks=seq(0,5,0.1))+scale_y_continuous(breaks=seq(0,10000,1000))
dhk09_0000 <- read.table("/Volumes/WD_8TB/Data_Transfer/pflow/dhk09/09dhk_0000.csv", sep = ",", header = FALSE)
head(dhk09_0000)
object.size(dhk09_0000)
mnl96_0000 <- read.table("/Volumes/WD_8TB/Data_Transfer/pflow/mnl96/mnl96_0000.csv", sep = ",", header = FALSE)
library(datasets)
data(iris)
?iris
names(iris)
levels(iris$Species)
by(iris$Sepal.Length, iris$Species, mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
tapply(mtcars$mpg, mtcars$cyl, mean)
names(mtcars)
mean(mtcars[cyl == 4, "hp"])
mean(mtcars["cyl" == 4, "hp"])
mean(mtcars$hp["cyl" == 4, ])
mean(mtcars$hp["cyl" == 4])
mean(mtcars$hp["cyl" == 4], na.rm = T)
tapply(mtcars$hp, mtcars$cyl, mean)
mtcars$hp["cyl" == 4]
mtcars$hp["cyl" = 4]
mtcars["cyl" = 4]$hp
mtcars["cyl" = 4, "hp"]
mtcars[cyl = 4]
mtcars[cyl = 4, ]
mtcars[mtcars$cyl = 4, ]
mtcars[mtcars$cyl == 4, ]
mean(mtcars[mtcars$cyl == 4, ])
mean(mtcars[mtcars$cyl == 4, ]$hp)
mean(mtcars[mtcars$cyl == 4, ]$hp) - mean(mtcars[mtcars$cyl == 8, ]$hp)
abs(mean(mtcars[mtcars$cyl == 4, ]$hp) - mean(mtcars[mtcars$cyl == 8, ]$hp))
debug(ls)
ls
?ls
ls(mtcars)
debug(ls)
ls(mtcars)
\q
q
q
exit
exit()
debug(ls)
ls(mtcars)
;
library(datasets)
data(mtcars)
debug(ls)
ls(mtcars)
set.seed(20)
x <- rnorm(100)
e <- rnorm(100, 0, 2)
Y <- 0.5 + 2 * x + e
summary(y)
summary(Y)
plot(x, Y)
set.seed(10)
x <- rbinom(100, 1, 0.5)
Y <- 0.5 + 2 * x + e
summary(Y)
plot(x, Y)
rankall <- function(outcome, num = "best") {
# read outcome data
data <- read.csv("rprog-data-ProgAssignment3-data/outcome-of-care-measures.csv",
colClasses = "character")
# initialize outcome data
outcomes <- as.data.frame(cbind(3:5,
c("heart attack", "heart failure", "pneumonia")))
names(outcomes) <- c("id", "name")
# reduce to relevant columns
data <- data[, c(2, 7, 11, 17, 23)]
# coerce outcome rates to numeric
data[, 3] <- as.numeric(data[, 3]) # heart attack
data[, 4] <- as.numeric(data[, 4]) # heart failure
data[, 5] <- as.numeric(data[, 5]) # pneumonia
# check that outcome is valid
ifelse(sum(outcome %in% outcomes$name), 1, stop("invalid outcome"))
# reduce to relevant columns
outcome.id <- as.numeric(as.character(outcomes[outcomes$name == outcome, ]$id))
data <- data[, c(1, 2, outcome.id)]
# remove NAs in mortality rate
data <- data[complete.cases(data[, 3]), ]
# return a data frame with the hospital names and the abbr. state name
frequency <- data.frame(State = names(tapply(data$State,
data$State,
length)),
Freq = tapply(data$State,
data$State,
length))
rownames(frequency) <- NULL
name <- character(0)
for(state in frequency$State) {
state.table <- data[data$State == state, ]
state.table <- state.table[order(state.table[, 3],
state.table$Hospital.Name), ]
rank <- ifelse(num == "best", 1,
ifelse(num == "worst", nrow(state.table),
ifelse(num > nrow(state.table), NA, num)))
name <- c(name, state.table[rank, ]$Hospital.Name)
}
return(data.frame(hospital = name, state = frequency$State))
}
head(rankall("heart attack", 20), 10)
setwd("~/Documents/Coursera/Data Science Specialization/R Programming/rprog/")
head(rankall("heart attack", 20), 10)
outcome = "heart attack"
num = 20
data <- read.csv("rprog-data-ProgAssignment3-data/outcome-of-care-measures.csv",
colClasses = "character")
outcomes <- as.data.frame(cbind(3:5,
c("heart attack", "heart failure", "pneumonia")))
names(outcomes) <- c("id", "name")
data <- data[, c(2, 7, 11, 17, 23)]
data[, 3] <- as.numeric(data[, 3]) # heart attack
data[, 4] <- as.numeric(data[, 4]) # heart failure
data[, 5] <- as.numeric(data[, 5]) # pneumonia
ifelse(sum(outcome %in% outcomes$name), 1, stop("invalid outcome"))
outcome.id <- as.numeric(as.character(outcomes[outcomes$name == outcome, ]$id))
data <- data[, c(1, 2, outcome.id)]
data <- data[complete.cases(data[, 3]), ]
frequency <- data.frame(State = names(tapply(data$State,
data$State,
length)),
Freq = tapply(data$State,
data$State,
length))
frequency
rownames(frequency) <- NULL
name <- character(0)
for(state in frequency$State) {
state.table <- data[data$State == state, ]
state.table <- state.table[order(state.table[, 3],
state.table$Hospital.Name), ]
rank <- ifelse(num == "best", 1,
ifelse(num == "worst", nrow(state.table),
ifelse(num > nrow(state.table), NA, num)))
name <- c(name, state.table[rank, ]$Hospital.Name)
}
name <- character(0)
for(state in frequency$State) {
state.table <- data[data$State == state, ]
state.table <- state.table[order(state.table[, 3],
state.table$Hospital.Name), ]
rank <- ifelse(num == "best", 1,
ifelse(num == "worst", nrow(state.table), num))
name <- c(name, ifelse(num > nrow(state.table),
NA,
state.table[rank, ]$Hospital.Name)
}
name <- character(0)
for(state in frequency$State) {
state.table <- data[data$State == state, ]
state.table <- state.table[order(state.table[, 3],
state.table$Hospital.Name), ]
rank <- ifelse(num == "best", 1,
ifelse(num == "worst", nrow(state.table), num))
name <- c(name, ifelse(num > nrow(state.table),
NA,
state.table[rank, ]$Hospital.Name))
}
rankall <- function(outcome, num = "best") {
# read outcome data
data <- read.csv("rprog-data-ProgAssignment3-data/outcome-of-care-measures.csv",
colClasses = "character")
# initialize outcome data
outcomes <- as.data.frame(cbind(3:5,
c("heart attack", "heart failure", "pneumonia")))
names(outcomes) <- c("id", "name")
# reduce to relevant columns
data <- data[, c(2, 7, 11, 17, 23)]
# coerce outcome rates to numeric
data[, 3] <- as.numeric(data[, 3]) # heart attack
data[, 4] <- as.numeric(data[, 4]) # heart failure
data[, 5] <- as.numeric(data[, 5]) # pneumonia
# check that outcome is valid
ifelse(sum(outcome %in% outcomes$name), 1, stop("invalid outcome"))
# reduce to relevant columns
outcome.id <- as.numeric(as.character(outcomes[outcomes$name == outcome, ]$id))
data <- data[, c(1, 2, outcome.id)]
# remove NAs in mortality rate
data <- data[complete.cases(data[, 3]), ]
# return a data frame with the hospital names and the abbr. state name
frequency <- data.frame(State = names(tapply(data$State,
data$State,
length)),
Freq = tapply(data$State,
data$State,
length))
rownames(frequency) <- NULL
name <- character(0)
for(state in frequency$State) {
state.table <- data[data$State == state, ]
state.table <- state.table[order(state.table[, 3],
state.table$Hospital.Name), ]
rank <- ifelse(num == "best", 1,
ifelse(num == "worst", nrow(state.table), num))
name <- c(name, ifelse(num > nrow(state.table),
NA,
state.table[rank, ]$Hospital.Name))
}
return(data.frame(hospital = name, state = frequency$State))
}
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
frequency <- data.frame(State = names(tapply(data$State,
data$State,
length)),
Freq = tapply(data$State,
data$State,
length))
frequency
for(state in frequency$State) {
state.table <- data[data$State == state, ]
state.table <- state.table[order(state.table[, 3],
state.table$Hospital.Name), ]
rank <- ifelse(num == "best", 1,
ifelse(num == "worst", nrow(state.table), num))
state
rank
name <- c(name, ifelse(num > nrow(state.table),
NA,
state.table[rank, ]$Hospital.Name))
}
?print
for(state in frequency$State) {
state.table <- data[data$State == state, ]
state.table <- state.table[order(state.table[, 3],
state.table$Hospital.Name), ]
rank <- ifelse(num == "best", 1,
ifelse(num == "worst", nrow(state.table), num))
print(paste(state, rank, sep = ": "))
name <- c(name, ifelse(num > nrow(state.table),
NA,
state.table[rank, ]$Hospital.Name))
}
frequency <- data.frame(State = names(tapply(data$State,
data$State,
length)),
Freq = tapply(data$State,
data$State,
length))
rownames(frequency) <- NULL
name <- character(0)
for(state in frequency$State) {
state.table <- data[data$State == state, ]
state.table <- state.table[order(state.table[, 3],
state.table$Hospital.Name), ]
rank <- ifelse(num == "best", 1,
ifelse(num == "worst", nrow(state.table), num))
print(paste(state, rank, nrow(state.table), sep = ": "))
name <- c(name, ifelse(num > nrow(state.table),
NA,
state.table[rank, ]$Hospital.Name))
}
num = "worst"
frequency <- data.frame(State = names(tapply(data$State,
data$State,
length)),
Freq = tapply(data$State,
data$State,
length))
rownames(frequency) <- NULL
name <- character(0)
for(state in frequency$State) {
state.table <- data[data$State == state, ]
state.table <- state.table[order(state.table[, 3],
state.table$Hospital.Name), ]
rank <- ifelse(num == "best", 1,
ifelse(num == "worst", nrow(state.table), num))
print(paste(state, rank, nrow(state.table), sep = ": "))
name <- c(name, ifelse(num > nrow(state.table),
NA,
state.table[rank, ]$Hospital.Name))
}
rankall <- function(outcome, num = "best") {
# read outcome data
data <- read.csv("rprog-data-ProgAssignment3-data/outcome-of-care-measures.csv",
colClasses = "character")
# initialize outcome data
outcomes <- as.data.frame(cbind(3:5,
c("heart attack", "heart failure", "pneumonia")))
names(outcomes) <- c("id", "name")
# reduce to relevant columns
data <- data[, c(2, 7, 11, 17, 23)]
# coerce outcome rates to numeric
data[, 3] <- as.numeric(data[, 3]) # heart attack
data[, 4] <- as.numeric(data[, 4]) # heart failure
data[, 5] <- as.numeric(data[, 5]) # pneumonia
# check that outcome is valid
ifelse(sum(outcome %in% outcomes$name), 1, stop("invalid outcome"))
# reduce to relevant columns
outcome.id <- as.numeric(as.character(outcomes[outcomes$name == outcome, ]$id))
data <- data[, c(1, 2, outcome.id)]
# remove NAs in mortality rate
data <- data[complete.cases(data[, 3]), ]
# return a data frame with the hospital names and the abbr. state name
frequency <- data.frame(State = names(tapply(data$State,
data$State,
length)),
Freq = tapply(data$State,
data$State,
length))
rownames(frequency) <- NULL
name <- character(0)
for(state in frequency$State) {
state.table <- data[data$State == state, ]
state.table <- state.table[order(state.table[, 3],
state.table$Hospital.Name), ]
rank <- ifelse(num == "best", 1,
ifelse(num == "worst", nrow(state.table), num))
#print(paste(state, rank, nrow(state.table), sep = ": "))
name <- c(name, ifelse(num > nrow(state.table),
NA,
state.table[rank, ]$Hospital.Name))
}
return(data.frame(hospital = name, state = frequency$State))
}
tail(rankall("pneumonia", "worst"), 3)
rankall <- function(outcome, num = "best") {
# read outcome data
data <- read.csv("rprog-data-ProgAssignment3-data/outcome-of-care-measures.csv",
colClasses = "character")
# initialize outcome data
outcomes <- as.data.frame(cbind(3:5,
c("heart attack", "heart failure", "pneumonia")))
names(outcomes) <- c("id", "name")
# reduce to relevant columns
data <- data[, c(2, 7, 11, 17, 23)]
# coerce outcome rates to numeric
data[, 3] <- as.numeric(data[, 3]) # heart attack
data[, 4] <- as.numeric(data[, 4]) # heart failure
data[, 5] <- as.numeric(data[, 5]) # pneumonia
# check that outcome is valid
ifelse(sum(outcome %in% outcomes$name), 1, stop("invalid outcome"))
# reduce to relevant columns
outcome.id <- as.numeric(as.character(outcomes[outcomes$name == outcome, ]$id))
data <- data[, c(1, 2, outcome.id)]
# remove NAs in mortality rate
data <- data[complete.cases(data[, 3]), ]
# return a data frame with the hospital names and the abbr. state name
frequency <- data.frame(State = names(tapply(data$State,
data$State,
length)),
Freq = tapply(data$State,
data$State,
length))
rownames(frequency) <- NULL
name <- character(0)
for(state in frequency$State) {
state.table <- data[data$State == state, ]
state.table <- state.table[order(state.table[, 3],
state.table$Hospital.Name), ]
rank <- ifelse(num == "best", 1,
ifelse(num == "worst", nrow(state.table), num))
print(paste(state, rank, nrow(state.table), sep = ": "))
name <- c(name, ifelse(num > nrow(state.table),
NA,
state.table[rank, ]$Hospital.Name))
}
;
asd
}
rankall <- function(outcome, num = "best") {
# read outcome data
data <- read.csv("rprog-data-ProgAssignment3-data/outcome-of-care-measures.csv",
colClasses = "character")
# initialize outcome data
outcomes <- as.data.frame(cbind(3:5,
c("heart attack", "heart failure", "pneumonia")))
names(outcomes) <- c("id", "name")
# reduce to relevant columns
data <- data[, c(2, 7, 11, 17, 23)]
# coerce outcome rates to numeric
data[, 3] <- as.numeric(data[, 3]) # heart attack
data[, 4] <- as.numeric(data[, 4]) # heart failure
data[, 5] <- as.numeric(data[, 5]) # pneumonia
# check that outcome is valid
ifelse(sum(outcome %in% outcomes$name), 1, stop("invalid outcome"))
# reduce to relevant columns
outcome.id <- as.numeric(as.character(outcomes[outcomes$name == outcome, ]$id))
data <- data[, c(1, 2, outcome.id)]
# remove NAs in mortality rate
data <- data[complete.cases(data[, 3]), ]
# return a data frame with the hospital names and the abbr. state name
frequency <- data.frame(State = names(tapply(data$State,
data$State,
length)),
Freq = tapply(data$State,
data$State,
length))
rownames(frequency) <- NULL
name <- character(0)
for(state in frequency$State) {
state.table <- data[data$State == state, ]
state.table <- state.table[order(state.table[, 3],
state.table$Hospital.Name), ]
rank <- ifelse(num == "best", 1,
ifelse(num == "worst", nrow(state.table), num))
print(paste(state, rank, nrow(state.table), sep = ": "))
name <- c(name, ifelse(num > nrow(state.table),
NA,
state.table[rank, ]$Hospital.Name))
}
return(data.frame(hospital = name, state = frequency$State))
}
tail(rankall("pneumonia", "worst"), 3)
rankall <- function(outcome, num = "best") {
# read outcome data
data <- read.csv("rprog-data-ProgAssignment3-data/outcome-of-care-measures.csv",
colClasses = "character")
# initialize outcome data
outcomes <- as.data.frame(cbind(3:5,
c("heart attack", "heart failure", "pneumonia")))
names(outcomes) <- c("id", "name")
# reduce to relevant columns
data <- data[, c(2, 7, 11, 17, 23)]
# coerce outcome rates to numeric
data[, 3] <- as.numeric(data[, 3]) # heart attack
data[, 4] <- as.numeric(data[, 4]) # heart failure
data[, 5] <- as.numeric(data[, 5]) # pneumonia
# check that outcome is valid
ifelse(sum(outcome %in% outcomes$name), 1, stop("invalid outcome"))
# reduce to relevant columns
outcome.id <- as.numeric(as.character(outcomes[outcomes$name == outcome, ]$id))
data <- data[, c(1, 2, outcome.id)]
# remove NAs in mortality rate
data <- data[complete.cases(data[, 3]), ]
# return a data frame with the hospital names and the abbr. state name
frequency <- data.frame(State = names(tapply(data$State,
data$State,
length)),
Freq = tapply(data$State,
data$State,
length))
rownames(frequency) <- NULL
name <- character(0)
for(state in frequency$State) {
state.table <- data[data$State == state, ]
state.table <- state.table[order(state.table[, 3],
state.table$Hospital.Name), ]
rank <- ifelse(num == "best", 1,
ifelse(num == "worst", nrow(state.table), num))
print(paste(state, rank, nrow(state.table), sep = ": "))
name <- c(name, ifelse(rank > nrow(state.table),
NA,
state.table[rank, ]$Hospital.Name))
}
return(data.frame(hospital = name, state = frequency$State))
}
tail(rankall("pneumonia", "worst"), 3)
head(rankall("heart attack", 20), 10)
tail(rankall("heart failure"), 10)
source("rankall.R")
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
source("rankall.R")
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
source("rankall.R")
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
